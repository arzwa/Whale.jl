# Arthur Zwaenepoel - 2018
# Another rewrite for the Adaptive MCMC
# We take an approach where every proposal kernel is an object for itself that stores its
# associated. I think that can be a general setting to test different updates/adaptations/...
abstract type ProposalSettings end
abstract type ChainSettings end

# chain stuff
"""
    Chain(init, S, slices, rate_index; fixed_rates=Int64[])
The MCMC chain, keeping states and some data.
"""
mutable struct Chain <: ChainSettings
    lhood::Float64
    prior::Float64
    S::SpeciesTree
    slices::Slices
    ri::Dict{Int64,Int64}
    fixed_rates::Array{Int64}
    wgds::Dict{Int64,Array{Int64}}
    state::Dict{String,Array{Float64}}

    function Chain(init, S, slices, ri; fixed_rates::Array{Int64}=Int64[])
        wgds = get_wgds(S)
        new(NaN, NaN, S, slices, ri, fixed_rates, wgds, init)
    end
end

"""
    get_wgds(S)
Get an index mapping branches with WGDs to the ID s of the WGDs happning on these branches.
"""
function get_wgds(S)
    wgds = Dict{Int64,Array{Int64}}()
    for (node, v) in S.wgd_index
        x = Whale.non_wgd_child(S, node)
        haskey(wgds, x) ? push!(wgds[x], v) : wgds[x] = [v]
    end
    return wgds
end

# Proposal & algorithm stuff
"""
    UvProposal(œÉ)
    UvProposal(a, b)
A single univariate proposal kernel.
"""
mutable struct UvProposal
    kernel::Distribution{Univariate,Continuous}
    accepted::Real

    UvProposal(œÉ) = new(Normal(0., œÉ), 0.)
    UvProposal(a, b) = new(Uniform(a, b), 0.)
end

"""
    UvAdaptiveProposals(S; œÉŒ∏=0.02, œÉq=0.2, œÉŒΩ=0.2, œÉŒ∑=0.2)
Univariate adaptive proposal kernels.
"""
struct UvAdaptiveProposals <: ProposalSettings
    Œª::Dict{Int64,UvProposal}
    Œº::Dict{Int64,UvProposal}
    q::Dict{Int64,UvProposal}
    ŒΩ::UvProposal
    Œ∑::UvProposal
    œà::UvProposal  # for the all_branches update

    function UvAdaptiveProposals(S; œÉŒ∏=0.1, œÉq=0.2, œÉŒΩ=0.2, œÉŒ∑=0.1, œÉœà=0.1)
        Œª = Dict(n => UvProposal(œÉŒ∏) for n in keys(S.tree.nodes) if !haskey(S.wgd_index, n))
        Œº = Dict(n => UvProposal(œÉŒ∏) for n in keys(S.tree.nodes) if !haskey(S.wgd_index, n))
        q = Dict(n => UvProposal(œÉq) for n in values(S.wgd_index))
        new(Œª, Œº, q, UvProposal(œÉŒΩ), UvProposal(œÉŒ∑), UvProposal(œÉœà))
    end
end

"""
    mcmc!(ccd, chain, proposal, prior, ngen, freq; fname="")
Basic (non-adaptive) MCMC sampler.
"""
function mcmc!(ccd, chain, prop, prior, ngen, freq; fname::String="")
    @info "Distributing over $(length(workers())) workers"
    D = distribute(ccd)
    Whale.evaluate_prior!(chain, prior)
    Whale.evaluate_lhood!(D, chain, prior)
    for i in 1:ngen
        cycle!(D, chain, prop, prior)
        mod(i, freq) == 0 || i == 1 ? Whale.log_generation(chain, i, fname=fname) : nothing
    end
end

"""
    amcmc!(ccd, chain, proposal, prior, ngen, freq; fname="", bsize=25)
Adaptive MCMC sampler.
"""
function amcmc!(ccd, chain, prop, prior, ngen, freq; fname::String="", bsize::Int64=50)
    @info "Distributing over $(length(workers())) workers"
    D = distribute(ccd)
    Whale.evaluate_prior!(chain, prior)
    Whale.evaluate_lhood!(D, chain, prior)
    batch = 1
    for i in 1:ngen
        cycle!(D, chain, prop, prior)
        mod(i, freq) == 0 || i == 1 ? Whale.log_generation(chain, i, fname=fname) : nothing
        if i % bsize == 0
            adapt!(prop, batch, bsize)
            batch += 1
        end
    end
end

function cycle!(D, chain, prop, prior::GeometricBrownianMotion)
    if !(prior.fixed_ŒΩ)
        ŒΩ_update!(chain, prop, prior)
    end
    if !(prior.fixed_Œ∑)
        Œ∑_update!(D, chain, prop, prior)
    end
    Œ∏_update!(D, chain, prop, prior)
    q_update!(D, chain, prop, prior)
    branch_update!(D, chain, prop, prior)
    Œ∏_update_all!(D, chain, prop, prior)
end

function cycle!(D, chain, prop, prior::IidRates)
    if !(prior.fixed_Œ∑)
        Œ∑_update!(D, chain, prop, prior)
    end
    r_update!(chain, prop, prior)
    Œ∏_update!(D, chain, prop, prior)
    q_update!(D, chain, prop, prior)
    branch_update!(D, chain, prop, prior)
    Œ∏_update_all!(D, chain, prop, prior)
end

# updates
"""
    r_update(chain, prop, prior)
Updates the mean of the iid rates prior. Note that this parameter is stored in
Œª[1] and Œº[1] respectively.
"""
function r_update!(chain::ChainSettings, prop::ProposalSettings, prior::IidRates)
    Œª = chain.state["Œª"]  # we store the means of the iid rates priors in Œª‚ÇÅ and Œº‚ÇÅ
    Œº = chain.state["Œº"]  # since these have an analogous role as Œª‚ÇÅ and Œº‚ÇÅ in the gbm prior
    Œª_ = [Œª[1] + rand(prop.Œª[1].kernel) ; Œª[2:end]]
    Œº_ = [Œº[1] + rand(prop.Œº[1].kernel) ; Œº[2:end]]
    if Œª_[1] <= 0. || Œº_[1] <= 0.
        return
    end
    # likelihood isn't changed
    œÄ = Whale.evaluate_prior(chain.S, Œª_, Œº_, chain.state, prior)
    r = œÄ - chain.prior
    if log(rand()) < r
        update_chain!(chain, 1, Œª_[1], Œº_[1], œÄ, chain.lhood)
        update_prop!(prop, :Œª, 1)
        update_prop!(prop, :Œº, 1)
    end
end

"""
    Œ∏_update!(D::DArray{CCD}, chain, proposal, prior)
Rates [Œ∏ = (Œª·µ¢, Œº·µ¢)] update. Iterates over all branches and updates pairs of rates
based on their individual proposal kernels.
"""
function Œ∏_update!(D, chain, prop, prior)
    for i in 1:length(chain.state["Œª"])
        i in chain.fixed_rates ? continue : nothing
        state = chain.state
        Œª = state["Œª"]
        Œº = state["Œº"]
        q = q_ = state["q"]
        Œª·µ¢ = state["Œª"][i] + rand(prop.Œª[i].kernel)
        Œº·µ¢ = state["Œº"][i] + rand(prop.Œº[i].kernel)
        Œª·µ¢ <= 0. || Œº·µ¢ <= 0. ? continue : nothing
        Œª_ = [Œª[1:i-1] ; Œª·µ¢ ; Œª[i+1:end]]
        Œº_ = [Œº[1:i-1] ; Œº·µ¢ ; Œº[i+1:end]]

        # get the prior for the rates
        œÄ = Whale.evaluate_prior(chain.S, Œª_, Œº_, q_, state, prior)

        # get the likelihood by partial re-evaluation of the dynamic programming matrix
        l = Whale.evaluate_lhood!(D, Œª_, Œº_, q_, i, chain, prior)

        # log acceptance probability
        r = l + œÄ - (chain.lhood + chain.prior)
        if log(rand()) < r
            update_chain!(chain, i, Œª·µ¢, Œº·µ¢, œÄ, l)
            update_prop!(prop, :Œª, i)
            update_prop!(prop, :Œº, i)
            Whale.set_recmat!(D)
        end
    end
end

"""
    q_update!(D, chain, proposal, prior)
"""
function q_update!(D::DArray{CCD}, chain, prop, prior)
    for (n, i) in chain.S.wgd_index
        state = chain.state ; q = chain.state["q"]
        q·µ¢ = Whale.reflect(state["q"][i] + rand(prop.q[i].kernel))

        q_ = [q[1:i-1] ; q·µ¢ ; q[i+1:end]]
        œÄ = Whale.evaluate_prior(chain.S, state["Œª"], state["Œº"], q_, state, prior)
        l = Whale.evaluate_lhood!(D, state["Œª"], state["Œº"], q_, n, chain, prior)
        # XXX: 23/12/2018 the node was incorrect! we gave i instead of n to the lhood function!

        r = l + œÄ - (chain.lhood + chain.prior)
        if log(rand()) < r
            chain.state["q"][i] = q·µ¢
            chain.prior = œÄ
            chain.lhood = l
            update_prop!(prop, :q, i)
            Whale.set_recmat!(D)
        end
    end
end

"""
    ŒΩ_update!(chain, prop, prior::GeometricBrownianMotion)
Update of the ŒΩ parameter governing the correlation fo rates in the GBM prior.
Does not evaluate the likelihood so it's very cheap.
"""
function ŒΩ_update!(chain, prop, prior::GeometricBrownianMotion)
    ŒΩ_ = chain.state["ŒΩ"][1] + rand(prop.ŒΩ.kernel)
    œÄ = Whale.evaluate_prior(chain, ŒΩ_, prior)
    r = œÄ - chain.prior
    if log(rand()) < r
        chain.state["ŒΩ"][1] = ŒΩ_
        chain.prior = œÄ
        update_prop!(prop, :ŒΩ)
    end
end

"""
    Œ∑_update!(chain, prop, prior::GeometricBrownianMotion)
Update of the Œ∑ parameter.
"""
function Œ∑_update!(D, chain, prop, prior::PriorSettings)
    Œ∑_ = chain.state["Œ∑"][1] + rand(prop.Œ∑.kernel)
    œÄ_ = logpdf(prior.prior_Œ∑, chain.state["Œ∑"][1])
    œÄ  = logpdf(prior.prior_Œ∑, Œ∑_)
    l  = Whale.evaluate_lhood!(D, Œ∑_, chain, prior)
    r = l + œÄ - (chain.lhood + œÄ_)
    if log(rand()) < r
        chain.state["Œ∑"][1] = Œ∑_
        Whale.evaluate_prior!(chain, prior)
        update_prop!(prop, :Œ∑)
    end
end

"""
    branch_update!(D::DArray{CCD}, chain, proposal, prior)
Update Œª·µ¢, Œº·µ¢, ùíí·µ¢ jointly ‚àÄ branch i with one or more WGDs with retention
rates ùíí·µ¢ based on their respective individual proposal kernels. There is no
adaptation for this proposal, since the proposal kernels are adapted based on
the target in the `Œ∏_update!()` step.
"""
function branch_update!(D, chain, prop, prior)
    for (branch, wgds) in chain.wgds
        state = chain.state
        Œª = state["Œª"]
        Œº = state["Œº"]
        q = state["q"]
        Œª·µ¢ = state["Œª"][branch] + rand(prop.Œª[branch].kernel)
        Œº·µ¢ = state["Œº"][branch] + rand(prop.Œº[branch].kernel)
        Œª·µ¢ <= 0 || Œº·µ¢ <= 0 ? continue : nothing
        Œª_ = [Œª[1:branch-1] ; Œª·µ¢ ; Œª[branch+1:end]]
        Œº_ = [Œº[1:branch-1] ; Œº·µ¢ ; Œº[branch+1:end]]
        q_ = [i in wgds ? reflect(q[i] + rand(prop.q[i].kernel)) :
            q[i] for i in 1:length(q)]
        # XXX also a fault here, there was `q[i] in wgds ?` instead of `i in wgd ?`

        # get the prior for the rates
        œÄ = Whale.evaluate_prior(chain.S, Œª_, Œº_, q_, state, prior)

        # get the likelihood by partial re-evaluation of the dynamic programming matrix
        l = Whale.evaluate_lhood!(D, Œª_, Œº_, q_, branch, chain, prior)

        # log acceptance probability
        r = l + œÄ - (chain.lhood + chain.prior)
        if log(rand()) < r
            @debug "Branch update accepted!"
            update_chain!(chain, branch, Œª·µ¢, Œº·µ¢, œÄ, l)
            chain.state["q"][:] = q_[:]
            Whale.set_recmat!(D)
        end
    end
end

"""
    Œ∏_update_all!(D::DArray{CCD}, chain, proposal, prior)
Update all Œª and Œº jointly, with one update for all Œª's and an independent update
from the same kernel (œà kernel) for all Œº's.
"""
function Œ∏_update_all!(D, chain, prop, prior)
    Œª_ = chain.state["Œª"] .+ rand(prop.œà.kernel)
    Œº_ = chain.state["Œº"] .+ rand(prop.œà.kernel)
    for i in chain.fixed_rates
        Œª_[i] = chain.state["Œª"][i]
        Œº_[i] = chain.state["Œº"][i]
    end
    q_ = chain.state["q"]
    if any(x -> (x <= 0.), Œª_) || any(x -> (x <= 0.), Œº_) || any(x -> (x < 0. || x > 1.), q_)
        return
    end
    œÄ = Whale.evaluate_prior(chain.S, Œª_, Œº_, q_, chain.state, prior)
    l = Whale.evaluate_lhood!(D, Œª_, Œº_, q_, chain, prior)
    r = l + œÄ - (chain.lhood + chain.prior)
    if log(rand()) < r
        @debug "All branch update accepted!"
        chain.state["Œª"] = Œª_
        chain.state["Œº"] = Œº_
        chain.state["q"] = q_
        chain.prior = œÄ
        chain.lhood = l
        update_prop!(prop, :œà)
        Whale.set_recmat!(D)
    end
end

function update_chain!(chain, branch::Int64, Œª::Float64, Œº::Float64, œÄ::Float64, l::Float64)
    chain.state["Œª"][branch] = Œª
    chain.state["Œº"][branch] = Œº
    chain.prior = œÄ
    chain.lhood = l
end

update_prop!(prop, field::Symbol) = getfield(prop, field).accepted += 1
update_prop!(prop, field::Symbol, branch::Int64) = getfield(prop, field)[branch].accepted += 1

function adapt!(prop, batch, bsize;
        target=0.25, bound=5., Œ¥max=0.25, branch=[:Œª, :Œº, :q], hyper=[:œà, :Œ∑, :ŒΩ])
    Œ¥n = min(Œ¥max, 1/‚àöbatch)
    # branch-specific (dict) kernels
    for d in branch
        for (branch, p) in getfield(prop, d)
            @printf "%s%3d" d branch
            Œ± = p.accepted / bsize
            p.kernel = adapt_kernel(p.kernel, Œ±, Œ¥n, target, bound)
            p.accepted = 0
        end
    end
    # hyperparameter/global kernels
    for d in hyper
        @printf "%s   " d
        p = getfield(prop, d)
        Œ± = p.accepted / bsize
        p.kernel = adapt_kernel(p.kernel, Œ±, Œ¥n, target, bound)
        p.accepted = 0
    end
end

function adapt_kernel(kernel::Distributions.Normal{Float64}, Œ±, Œ¥n, target, bound)
    lœÉ = Œ± > target ? log(kernel.œÉ) + Œ¥n : log(kernel.œÉ) - Œ¥n
    lœÉ = abs(lœÉ) > bound ? sign(lœÉ) * bound : lœÉ
    @info "Œ± = $(@sprintf("%.2f",Œ±)): $(@sprintf("%.4f",kernel.œÉ)) ‚Üí $(@sprintf("%.4f",exp(lœÉ)))"
    return Normal(0., exp(lœÉ))
end

# likelihood evaluation DArray
# lower level functions implemented in `parallel.jl`
"""
    evaluate_lhood!(D::DArray, chain::ChainSettings, prior::PriorSettings)
Evaluate the likelihood for the current state of the chain, stores it in
the recmat field! Modifies the chain.lhood field.
"""
function evaluate_lhood!(D::DArray, chain::ChainSettings, prior::PriorSettings)
    L = evaluate_lhood!(D, chain.S, chain.slices, chain.state["Œª"], chain.state["Œº"],
            chain.state["q"], chain.state["Œ∑"][1], chain.ri)
    chain.lhood = L
    set_recmat!(D)
end

"""
    evaluate_lhood!(D::DArray, Œ∑::Float64, chain::ChainSettings, prior::PriorSettings)
    evaluate_lhood!(D::DArray, Œª::Array{Float64}, Œº::Array{Float64},
            node::Int64, chain::ChainSettings, prior::PriorSettings)
    evaluate_lhood!(D::DArray, Œª::Array{Float64}, Œº::Array{Float64},
            chain::ChainSettings, prior::PriorSettings)
    evaluate_lhood!(D::DArray, q::Array{Float64}, node::Int64,
            chain::ChainSettings, prior::PriorSettings)
    evaluate_lhood!(D::DArray, Œª::Array{Float64}, Œº::Array{Float64}, q::Array{Float64},
            node::Int64, chain::ChainSettings, prior::PriorSettings)
    evaluate_lhood!(D::DArray, Œª::Array{Float64}, Œº::Array{Float64}, q::Array{Float64},
            chain::ChainSettings, prior::PriorSettings)
Evaluate the likelihood when only rates have changed. Does not modify the chain.
"""
function evaluate_lhood!(D::DArray, Œ∑::Float64, chain::ChainSettings,
        prior::PriorSettings)
    return evaluate_root!(D, chain.S, chain.slices,  chain.state["Œª"],
        chain.state["Œº"], chain.state["q"], Œ∑, chain.ri)
end

function evaluate_lhood!(D::DArray, Œª::Array{Float64}, Œº::Array{Float64},
        node::Int64, chain::ChainSettings, prior::PriorSettings)
    return evaluate_partial!(D, node, chain.S, chain.slices, Œª, Œº,
        chain.state["q"], chain.state["Œ∑"][1], chain.ri)
end

function evaluate_lhood!(D::DArray, Œª::Array{Float64}, Œº::Array{Float64},
        chain::ChainSettings, prior::PriorSettings)
    return evaluate_lhood!(D, chain.S, chain.slices, Œª, Œº, chain.state["q"],
        chain.state["Œ∑"][1], chain.ri)
end

function evaluate_lhood!(D::DArray, q::Array{Float64}, node::Int64,
        chain::ChainSettings, prior::PriorSettings)
    return evaluate_partial!(D, node, chain.S, chain.slices, chain.state["Œª"],
        chain.state["Œº"], q, chain.state["Œ∑"][1], chain.ri)
end

function evaluate_lhood!(D::DArray, Œª::Array{Float64}, Œº::Array{Float64},
        q::Array{Float64}, node::Int64, chain::ChainSettings,
        prior::PriorSettings)
    return evaluate_partial!(D, node, chain.S, chain.slices, Œª, Œº, q,
        chain.state["Œ∑"][1], chain.ri)
end

function evaluate_lhood!(D::DArray, Œª::Array{Float64}, Œº::Array{Float64},
        q::Array{Float64}, chain::ChainSettings, prior::PriorSettings)
    return evaluate_lhood!(D, chain.S, chain.slices, Œª, Œº, q,
        chain.state["Œ∑"][1], chain.ri)
end

# logging
function log_generation(chain::ChainSettings)
    state = chain.state
    print(join([@sprintf "%7.5f" x for x in state["Œª"][2:4]], ",") * ",‚Ä¶,")
    print(join([@sprintf "%7.5f" x for x in state["Œº"][2:4]], ",") * ",‚Ä¶,")
    print(join([@sprintf "%7.5f" x for x in state["q"]], ",") * ",‚Ä¶,")
    haskey(state, "ŒΩ") ? (@printf "%7.5f," state["ŒΩ"][1]) : nothing
    @printf "%7.5f," state["Œ∑"][1]
    @printf "%7.5f,%7.5f\n" chain.prior chain.lhood
    flush(stdout)
end

function log_header(f, nr, nwgd, state)
    write(f, ",")
    write(f, join(["l"*string(i) for i in 1:nr], ","), ",")
    write(f, join(["m"*string(i) for i in 1:nr], ","), ",")
    nwgd > 0 ? write(f, join(["q"*string(i) for i in 1:nwgd], ",") * ",") : nothing
    haskey(state, "ŒΩ") ? write(f, "nu,") : nothing
    write(f, "eta,prior,lhood\n")
end

function log_generation(chain, gen; fname::String="")
    log_generation(chain)
    if length(fname) == 0 ; return ; end
    open(fname, "a+") do f
        state = chain.state
        nwgd = length(state["q"])
        nr = length(state["Œª"])
        gen == 1 ? log_header(f, nr, nwgd, state) : nothing
        write(f, "$gen,")
        write(f, join([@sprintf "%7.5f" x for x in state["Œª"]], ",") * ",")
        write(f, join([@sprintf "%7.5f" x for x in state["Œº"]], ",") * ",")
        nwgd > 0 ? write(f, join([@sprintf "%7.5f" x for x in state["q"]], ",") * ",") : nothing
        haskey(state, "ŒΩ") ? write(f, string(state["ŒΩ"][1]), ",") : nothing
        write(f, string(state["Œ∑"][1]), ",")
        write(f, string(chain.prior), ",", string(chain.lhood), "\n")
    end
end

# reflection
function reflect(x::Float64, a::Float64, b::Float64)
    while !(a <= x <= b)
        x = x < a ? 2a - x : x
        x = x > b ? 2b - x : x
    end
    return x
end

reflect(x)::Float64 = reflect(x, 0., 1.)

# show the chain
function Base.show(io::IO, chain::ChainSettings)
    println(io, "Metropolis-Hastings MCMC chain")
    println(io, "state:")
    println(io, " .. ÃÑŒª = ", sum(chain.state["Œª"])/length(chain.state["Œª"]))
    println(io, " .. ÃÑÃÑŒº = ", sum(chain.state["Œº"])/length(chain.state["Œº"]))
    println(io, " .. q = ", chain.state["q"])
    println(io, " .. Œ∑ = ", chain.state["Œ∑"][1])
    if haskey(chain.state, "ŒΩ")
        println(io, " .. ŒΩ = ", chain.state["ŒΩ"][1])
    end
    println(io, "prior: ", chain.prior)
    println(io, "lhood: ", chain.lhood)
end
